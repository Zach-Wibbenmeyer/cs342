Zach Wibbenmeyer
Professor Vanderlinden
CS342 - Project 4

I do not really have much optimization built into my queries, but this
is probably the most involved one:

SELECT V.ID AS Venue, R.ID AS Room, B.name AS Band, E.firstName || ' ' || E.lastName AS Employee 
FROM Venue V
	INNER JOIN Room R ON V.ID = R.venueID
	INNER JOIN BandBooking BB ON R.ID = BB.roomID
	INNER JOIN Band B ON BB.bandID = B.ID
	INNER JOIN EmployeeBooking EB ON R.ID = EB.roomID
	INNER JOIN Employee E ON EB.employeeID = E.ID
WHERE B.members > 2
ORDER BY V.ID ASC;

Analysis of Execution:

SELECT statement
SORT Unique
Hash JOIN
HASH JOIN
Merge JOIN Cartesian
Table Access Full (Employee)
Buffer SORT
Table Access Full (EmployeeBooking)
Table Access Full (Room)

Since this is a join, it cannot utilize the indexes on the ID's of the joined tables,
so it must use table access full's instead.

One possible example of optimization might be using:
	"R.ID = BB.roomID AND BB.bandID IN (SELECT ID FROM Band WHERE members > 2)"
	
However, this does not necessarily improve execution time.